#+title:
#+author:
#+email:

#+OPTIONS: toc:nil num:nil
#+REVEAL_TRANS: convex
#+REVEAL_THEME: black
#+REVEAL_MAX_SCALE: 1.0
#+OPTIONS: ^:nil

* A Brief Introduction to Copilot
/and simple application on stm32f3discovery/

\nbsp

\nbsp

\nbsp

\nbsp

\nbsp

/喻昌远/

/gmail: reivzy AT gmail.com/

/wechat: yu_changyuan/

* Self Introduction
#+ATTR_REVEAL: :frag fade-in
- As a digital IC design engineer since 2007
- be interested in FP when use Emacs as main editor
- first know Haskell when meet perl 6
- learn Haskell and use it during 2008 ~ 2010
- switch to scala when got first Android phone, at 2010
* Copilot
A domain-specific language tailored to programming /runtime monitors/ for
#+ATTR_REVEAL: :frag fade-in
- hard real-time
- distributed
- reactive system
* Installation
As every one can expected
#+ATTR_REVEAL: :frag fade-in
#+begin_src sh
cabal install copilot
#+end_src
* Language
#+ATTR_REVEAL: :frag fade-in
A /Copilot/ program specify the behaviour of target system.
** specification
The program can be refered to as a /specification/
#+begin_src haskell
> :i Spec
type Spec =
  Control.Monad.Trans.Writer.Lazy.Writer
    [copilot-language-2.1.2:Copilot.Language.Spec.SpecItem] ()
  	-- Defined in `copilot-language-2.1.2:Copilot.Language.Spec'
#+end_src
** behaviour
#+ATTR_REVEAL: :frag fade-in
- Sample external variables, arrays, and functions.
- Update internal variables.
- Fire external triggers. (In case the specification is violated.)
* Stream
behave like lazy list
#+begin_src haskell
-- lazy list
nats_ll :: [Int32]
nats_ll = [0] + zipWith (+) (repeat 1) nats_ll

-- stream
nats :: Stream Int32
nats = [0] ++ (1 + nats)
#+end_src
** type
#+begin_src haskell
> import Language.Copilot
> :i Stream

...
instance Eq (Stream a)
  -- Defined in `copilot-language-2.1.2:Copilot.Language.Stream'
instance (Typed a, Eq a, Floating a) => Floating (Stream a)
  -- Defined in `copilot-language-2.1.2:Copilot.Language.Stream'
instance (Typed a, Eq a, Fractional a) => Fractional (Stream a)
  -- Defined in `copilot-language-2.1.2:Copilot.Language.Stream'
instance (Typed a, Eq a, Num a) => Num (Stream a)
  -- Defined in `copilot-language-2.1.2:Copilot.Language.Stream'
instance Show (Stream a)
  -- Defined in `copilot-language-2.1.2:Copilot.Language.Stream'
...
#+end_src
** type(cont)
#+begin_src haskell
class Typed a where
  Copilot.Core.Type.typeOf :: Copilot.Core.Type.Type a
  Copilot.Core.Type.simpleType ::
    Copilot.Core.Type.Type a -> Copilot.Core.Type.SimpleType
  	-- Defined in `Copilot.Core.Type'
instance [safe] Typed Word8 -- Defined in `Copilot.Core.Type'
instance [safe] Typed Word64 -- Defined in `Copilot.Core.Type'
instance [safe] Typed Word32 -- Defined in `Copilot.Core.Type'
instance [safe] Typed Word16 -- Defined in `Copilot.Core.Type'
instance [safe] Typed Int8 -- Defined in `Copilot.Core.Type'
instance [safe] Typed Int64 -- Defined in `Copilot.Core.Type'
instance [safe] Typed Int32 -- Defined in `Copilot.Core.Type'
instance [safe] Typed Int16 -- Defined in `Copilot.Core.Type'
instance [safe] Typed Float -- Defined in `Copilot.Core.Type'
instance [safe] Typed Double -- Defined in `Copilot.Core.Type'
instance [safe] Typed Bool -- Defined in `Copilot.Core.Type'
#+end_src
** operation
#+begin_src haskell
> :t constant
constant :: Typed a => a -> Stream a

> :t constW32
constW32 :: Word32 -> Stream Word32

> :t (++)
(++) :: Typed a => [a] -> Stream a -> Stream a

> :t drop
drop :: Typed a => Int -> Stream a -> Stream a
#+end_src
** tool
*** observer
#+begin_src haskell
> :t observer
observer :: Typed a => String -> Stream a -> Spec
#+end_src
*** prettyPrint
#+begin_src haskell
> :t prettyPrint
prettyPrint :: Spec -> IO ()
#+end_src
*** interpret
#+begin_src haskell
> :t interpret
interpret :: Integer -> Spec -> IO ()
#+end_src
** example
#+begin_src haskell
inc :: Stream Bool
inc = cycle [False, False, True]

seq :: Stream Int32
seq = [0] ++ (ifThenElse inc (1 + seq) seq)
#+end_src
* External variable/function
#+begin_src haskell
> :t extern
extern :: Typed a => String -> Maybe [a] -> Stream a

> :t externI16
externI16 :: String -> Maybe [Int16] -> Stream Int16

> :t externFun
externFun
  :: Typed a =>
     String
     -> [copilot-language-2.1.2:Copilot.Language.Stream.Arg]
     -> Maybe (Stream a)
     -> Stream a

> :t arg
arg
  :: Typed a =>
     Stream a -> copilot-language-2.1.2:Copilot.Language.Stream.Arg
#+end_src
* Trigger
#+begin_src haskell
> :t trigger
trigger
  :: String
     -> Stream Bool
     -> [copilot-language-2.1.2:Copilot.Language.Stream.Arg]
     -> Spec
#+end_src
** example
#+begin_src haskell
prettyPrint $ do { observer "inc" inc; observer "seq" seq ; trigger "trig" inc [arg seq]}

interpret 10 $ do { observer "inc" inc; observer "seq" seq ; trigger "trig" inc [arg seq]}
#+end_src
* Demo
file:stm32f3discovery.jpg

** Key Features
#+ATTR_REVEAL: :frag fade-in
- STM32F303VCT6 microcontroller featuring 256 KB Flash, 48 KB RAM in an LQFP100 package
- On-board ST-LINK/V2 with selection mode switch to use the kit as a standaloneST-LINK/V2 (with SWD connector for programming and debugging)
- Board power supply: through USB bus or from an external 3 V or 5 V supply voltage
- External application power supply: 3 V and 5 V
- L3GD20, ST MEMS motion sensor, 3-axis digital output gyroscope
- LSM303DLHC, ST MEMS system-in-package featuring a 3D digital linear acceleration sensor and a 3D digital magnetic sensor
** cont.
#+ATTR_REVEAL: :frag fade-in
- Ten LEDs:
  + LD1 (red) for 3.3 V power on
  + LD2 (red/green) for USB communication
  + Eight user LEDS, LD3/10 (red), LD4/9 (blue), LD5/8 (orange) and LD6/7 (green)
- Two pushbuttons (user and reset)
- USB USER with Mini-B connector
- Extension header for all LQFP100 I/Os for quick connection to prototyping board and easy probing
** But...
Most the important is
#+ATTR_REVEAL: :frag fade-in
- About RMB90, from taobao (^_^)
- Support *Linux*, seamlessly. <-- this is true reason
** Interface
#+begin_src haskell
module Interface where

import Language.Copilot
import qualified Prelude as P

ledPwmSet :: Stream Word8 -> Stream Float -> Spec
ledPwmSet id val =
  trigger "led_pwm_set" (constB True) [arg id, arg val]

btnStatus :: Stream Bool
btnStatus = externFun "btn_status" [] $ Just $ constB False
#+end_src
** Demo1
#+ATTR_REVEAL: :frag fade-in
- Brightness of LEDs decrease in turn
- Click button to switch the most bright LED
*** implementation
#+begin_src haskell
module Demo1 where
import Interface
import Language.Copilot

import qualified Prelude as P

import Copilot.Compile.C99

ledNum :: Int
ledNum = 8

-- see Language.Copilot.!!
idx :: (Typed a, Typed b, Integral b) =>
       [Stream a] -> Stream b -> Stream a -> Stream a
idx group sel def =
  let tbl = map (constant . fromIntegral) [0 .. P.length group - 1]
      f (x:xs) (y:ys) = mux (x == sel) y (f xs ys)
      f [] _ = def
      f _ [] = def
  in f tbl group

ledSpec = do
  let clicked = not ([False] ++ btnStatus) && btnStatus
  let idxNow = [0 .. fromIntegral ledNum-1] ++ idxNow :: Stream Word8
  let off = [0] ++ (mux clicked (off + 1) off)
  let valList = map constF $ map (/ 8.0) [1 .. fromIntegral ledNum]
  let valNow = idx valList  ((idxNow + off) `mod` 8) $ constF 0
  ledPwmSet idxNow valNow

main = do
  reify ledSpec >>= compile defaultParams
#+end_src
** Demo2
#+ATTR_REVEAL: :frag fade-in
- LED brightness has same specification as demo1
- Most bright LED will switch over time
- Click button to swap the switch direction
** Demo3
#+ATTR_REVEAL: :frag fade-in
- LED brightness will reflect the direction of accelerate
- Click button to inverse the direction
*** extra interface
#+begin_src haskell
accX = externF "acc_x" Nothing
accY = externF "acc_y" Nothing
accZ = externF "acc_z" Nothing
#+end_src
* Reference
- Copilot: https://github.com/Copilot-Language/Copilot
- Tutorial: https://github.com/Copilot-Language/copilot-discussion/raw/master/tutorial/copilot_tutorial.pdf
